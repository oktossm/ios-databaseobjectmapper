// MARK: - AutoDatabaseMappable
import RealmSwift
import DatabaseObjectsMapper
{% for type in types.all|annotated:"AutoImport" %}
{% for value in type.annotations.AutoImport|toArray %}
import {{ value }}
{% endfor %}
{% endfor %}

// swiftlint:disable file_length

{% macro iterateVariables variables idName %}
    {% for variable in variables where variable.readAccess != "private" and variable.readAccess != "fileprivate" and variable.name != idName %}
    {% if not variable.annotations.skipMapping %}{% call mapVariable variable idName %}{% endif %}
    {% endfor %}
{% endmacro %}

{% macro mapVariable var idName %}
    {% if var.typeName.unwrappedTypeName|hasPrefix:"Int" or var.typeName.unwrappedTypeName == "Float" or var.typeName.unwrappedTypeName == "Double" %}{% if var.typeName.isOptional %}let {{ var.name }} = RealmOptional<{{var.typeName.unwrappedTypeName}}>(){% else %}@objc public dynamic var {{ var.name }}: {{var.typeName}} = 0{% endif %}{% endif %}
    {% if var.typeName.unwrappedTypeName == "Bool" %}{% if var.typeName.isOptional %}let {{ var.name }} = RealmOptional<{{var.typeName.unwrappedTypeName}}>(){% else %}@objc public dynamic var {{ var.name }}: {{var.typeName}} = false{% endif %}{% endif %}
    {% if var.typeName.unwrappedTypeName == "String" or var.typeName.unwrappedTypeName == "Data" %}@objc public dynamic var {{ var.name }}: {{var.typeName}}{% ifnot var.typeName.isOptional %} = {{var.typeName}}(){% endif %}{% endif %}
    {% if var.typeName.unwrappedTypeName == "Date" %}{% if var.typeName.isOptional %}let {{ var.name }} = RealmOptional<Double>(){% else %}@objc public dynamic var {{ var.name }}: Double = 0{% endif %}{% endif %}
    {% if var.typeName.unwrappedTypeName == "URL" %}@objc public dynamic var {{ var.name }}: String{% ifnot var.typeName.isOptional %} = String(){% else %}?{% endif %}{% endif %}
    {% if var.type.based.DatabaseMappable or var.type.based.UniquelyMappable %}@objc public dynamic var {{ var.name }}: {{var.typeName.unwrappedTypeName}}Container?{% endif %}
    {% if var.type.based.DictionaryCodable and not var.type.based.DatabaseMappable and not var.type.based.UniquelyMappable %}@objc public dynamic var {{ var.name }}{% if var.typeName.isOptional %}: Data?{% else %} = Data(){% endif %}{% endif %}
    {% if var.typeName.name|hasPrefix:"Relation" and var.typeName.isGeneric and var.defaultValue|contains:"type: .inverse" %}let {{ var.name }} = LinkingObjects(fromType: {{var.typeName.generic.typeParameters.first.typeName.unwrappedTypeName}}Container.self, property: "{{var.annotations.inverseRelation}}"){% endif %}
    {% if var.typeName.name|hasPrefix:"Relation" and var.typeName.isGeneric and var.defaultValue|contains:"type: .direct" %}let {{ var.name }} = List<{{var.typeName.generic.typeParameters.first.typeName.unwrappedTypeName}}Container>(){% endif %}
    {% if var.typeName.isArray and ( var.typeName.array.elementTypeName.based.DictionaryCodable or var.typeName.array.elementTypeName.based.Codable ) %}@objc public dynamic var {{ var.name }}{% if var.typeName.isOptional %}: Data?{% else %} = Data(){% endif %}{% endif %}
    {% if var.typeName.isDictionary and ( var.typeName.dictionary.keyTypeName.based.DictionaryCodable or var.typeName.dictionary.keyTypeName.based.Codable ) and (var.typeName.dictionary.valueTypeName.based.DictionaryCodable or var.typeName.dictionary.valueTypeName.based.Codable) %}@objc public dynamic var {{ var.name }}{% if var.typeName.isOptional %}: Data?{% else %} = Data(){% endif %}{% endif %}
    {% if var.typeName.isGeneric and var.typeName.generic.name == "Set" and ( var.typeName.generic.typeParameters.first.typeName.based.DictionaryCodable or var.typeName.generic.typeParameters.first.typeName.based.Codable ) %}@objc public dynamic var {{ var.name }}{% if var.typeName.isOptional %}: Data?{% else %} = Data(){% endif %}{% endif %}
    {% if var.type.kind == "enum" and not var.type.hasAssociatedValues and ( var.type.rawTypeName|hasPrefix:"Int" or var.type.rawTypeName.unwrappedTypeName == "Float" or var.type.rawTypeName.unwrappedTypeName == "Double" ) %}{% if var.typeName.isOptional %}let {{ var.name }} = RealmOptional<{{var.type.rawTypeName.unwrappedTypeName}}>(){% else %}@objc public dynamic var {{ var.name }}: {{var.type.rawTypeName}} = {{var.type.rawTypeName}}(){% endif %}{% endif %}
    {% if var.type.kind == "enum" and not var.type.hasAssociatedValues and var.type.rawTypeName.unwrappedTypeName == "String" %}@objc public dynamic var {{ var.name }}: {{var.type.rawTypeName}}{% if var.typeName.isOptional %}?{% else %} = {{var.type.rawTypeName}}(){% endif %}{% endif %}
{% endmacro %}

// MARK: - AutoDatabaseMappable for classes, structs
{% for type in types.implementing.AutoDatabaseMappable|!enum|!protocol %}
// MARK: - {{ type.name }} generated container
{{ type.accessLevel }} class {{ type.name }}Container: Object, DatabaseContainer {
{% for variable in type.staticVariables where variable.name == "idKey" %}
{% set idName variable.defaultValue|replace:"\",""|replace:type.name,""|replace:".","" %}
{% for var in type.storedVariables where var.name == idName %}
    public static var idKey: WritableKeyPath<{{ type.name }}Container, {{ var.typeName }}> = \{{ type.name }}Container.{{ idName }}
    public override static func primaryKey() -> String? {
        return "{{ idName }}"
    }
    public override class func indexedProperties() -> [String] {
        return [{% for prop in type.annotations.indexedProperties %}{%ifnot forloop.first%}, {% endif%}"{{prop}}"{% endfor%}]
    }
    @objc public dynamic var {{ idName }}: {{ var.typeName }} = {% if var.typeName.unwrappedTypeName == "String" %}""{% else %}0{% endif%}
{% endfor %}
{% call iterateVariables type.storedVariables idName %}
{% endfor %}
}

extension {{ type.name }}: KeyPathConvertible {
    public static func key(for keyPath: PartialKeyPath<{{ type.name }}>) -> String {
        switch keyPath {
        {% for var in type.storedVariables %}
        case \{{ type.name }}.{{ var.name }}: return "{{ var.name }}"
        {% endfor %}
        default:
            fatalError("Unhandled key path")
        }
    }
}
{% endfor %}

